import requests

KEYGEN_BASE_URL = "https://api.keygen.localhost/v1"
LICENSE_KEY = "E158E7-938C59-173218-2B3646-466F0A-V3" # Generated by test_admin.py
CA_BUNDLE_PATH = "./certificates/authorities/local/my_local_ca_bundle.pem"

def validate_license(license_key):
    """Check if the license is valid (not expired/revoked/etc) and get its id."""
    data = {"meta": {"key": license_key}}
    headers = {
        "Accept": "application/vnd.api+json",
        "Content-Type": "application/vnd.api+json",
    }
    resp = requests.post(
        f"{KEYGEN_BASE_URL}/licenses/actions/validate-key",
        json=data,
        headers=headers,
        verify=CA_BUNDLE_PATH
    )
    response = resp.json()
    print("[Validate License] Status:", resp.status_code)
    print("[Validate License] Response:", response)
    if resp.status_code == 200 and "data" in response:
        lic = response["data"]
        # Check status for more control
        if lic["attributes"]["status"] == "ACTIVE":
            return lic["id"]
        else:
            print(f"License is not active: {lic['attributes']['status']}")
            return None
    else:
        print("License key invalid or API error.")
        return None

def machine_already_registered(license_id, fingerprint, license_key):
    """Check if this device is already activated (to avoid duplicate seats)."""
    headers = {
        "Authorization": f"License {license_key}",
        "Accept": "application/vnd.api+json",
        "Content-Type": "application/vnd.api+json",
    }
    resp = requests.get(
        f"{KEYGEN_BASE_URL}/licenses/{license_id}/machines?fingerprint={fingerprint}",
        headers=headers,
        verify=CA_BUNDLE_PATH
    )
    response = resp.json()
    print("[Check Machine] Status:", resp.status_code)
    print("[Check Machine] Response:", response)
    if resp.status_code == 200 and response.get("data"):
        # Already registered
        return response["data"][0]["id"]
    return None

def activate_machine(license_key, license_id, fingerprint, platform="Windows", machine_name=None):
    """Activate this device for the license if not already claimed."""
    data = {
        "data": {
            "type": "machines",
            "attributes": {
                "fingerprint": fingerprint,
                "platform": platform
            },
            "relationships": {
                "license": {"data": {"type": "licenses", "id": license_id}}
            }
        }
    }
    if machine_name:
        data["data"]["attributes"]["name"] = machine_name

    headers = {
        "Authorization": f"License {license_key}",
        "Accept": "application/vnd.api+json",
        "Content-Type": "application/vnd.api+json",
    }

    resp = requests.post(
        f"{KEYGEN_BASE_URL}/machines",
        json=data,
        headers=headers,
        verify=CA_BUNDLE_PATH
    )
    print("[Activate Machine] Status:", resp.status_code)
    print("[Activate Machine] Response:", resp.json())
    if resp.status_code == 201:
        print("Machine activation successful!")
        return resp.json()["data"]["id"]
    else:
        print("Machine activation failed.")
        return None

if __name__ == "__main__":
    FINGERPRINT = "MY-TEST-DEVICE-004"  # Unique per device
    PLATFORM = "Windows"
    MACHINE_NAME = "Lucas' Forth Laptop"

    # Step 1: Validate license
    license_id = validate_license(LICENSE_KEY)
    if not license_id:
        print("License invalid. Exiting.")
        exit(1)

    # Step 2: Check if this device is already registered (seat already claimed)
    machine_id = machine_already_registered(license_id, FINGERPRINT, LICENSE_KEY)
    if not machine_id:
        # Not registered yetâ€”activate!
        machine_id = activate_machine(LICENSE_KEY, license_id, FINGERPRINT, PLATFORM, MACHINE_NAME)
        if not machine_id:
            print("Could not claim a seat. Exiting.")
            exit(1)
    else:
        print("Machine already registered:", machine_id)

    print("License and seat validated! Safe to proceed with login/startup.")
